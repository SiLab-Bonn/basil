# Device description for the Tektronix MSO54, MSO4104b, MSO4034 Mixed Signal Oscilloscope.
# If you need other commands consider to add them here or
# use dut._intf._resource.write()/query() to directly talk to the device

identifier : TEKTRONIX
set_source : DATa:SOUrce  # the channel for the get_data command
data_init : DATa:INIT  # reset data taking settings
set_data_start : DATa:STARt  # the data start index for read out  (?)
set_data_stop : DATa:STOP  # the data stop index for read out (?)
set_data_width : DATa:WIDth
get_data_width : DATa:WIDth?
set_data_encoding : DATa:ENCdg
get_data_encoding : DATa:ENCdg?
set_number_points : WFMPre:NR_Pt
get_number_points : WFMPre:NR_Pt?
# general trigger
set_trigger_mode : TRIGger:A:MODe
get_trigger_mode : TRIGger:A:MODe?
set_trigger_type : TRIGger:A:TYPe
get_trigger_type : TRIGger:A:TYPe?
set_trigger_level : TRIGger:A:LEVel  # set the trigger level in volt
get_trigger_level : TRIGger:A:LEVel?  # get the trigger level in volt
set_horizontal_trigger_position : HORizontal:TRIGger:POSition
get_horizontal_trigger_position : HORizontal:TRIGger:POSition?
force_trigger : TRIGger FORCe  # like the force trigger button
# edge trigger
get_triggr_source : TRIGger:A:EDGe:SOUrce?
set_trigger_edge_slope : TRIGger:A:EDGe:SLOpe
get_trigger_edge_slope : TRIGger:A:EDGe:SLOpe?
# pulse trigger
set_trigger_pulse_width_source : TRIGger:A:PULSEWidth:SOUrce
get_trigger_pulse_width_source : TRIGger:A:PULSEWidth:SOUrce?
set_trigger_pulse_width_polarity : TRIGger:A:PULSEWidth:POLarity
get_trigger_pulse_width_polarity : TRIGger:A:PULSEWidth:POLarity?
set_trigger_pulse_class : TRIGger:A:PULse:CLAss
get_trigger_pulse_class : TRIGger:A:PULse:CLAss?
set_trigger_pulse_width_when : TRIGger:A:PULSEWidth:WHEn
get_trigger_pulse_width_when : TRIGger:A:PULSEWidth:WHEn?
set_trigger_pulse_width_width : TRIGger:A:PULSEWidth:WIDth
get_trigger_pulse_width_width : TRIGger:A:PULSEWidth:WIDth?
# acquisition
set_acquire_mode : ACQuire:MODe  # set the data acquire mode (SAMPLE, AVERAGE, ... )
get_acquire_mode : ACQuire:MODe?  # get the data acquire mode (SAMPLE, AVERAGE, ... )
get_actual_acquire_mode : ACQuire:MODe:ACTUal  # returns the actual used acquire mode, is different to get_acquire_mode (in rare use cases)
set_acquire_stop_after : ACQuire:STOPAfter
get_acquire_stop_after : ACQuire:STOPAfter?
set_acquire_state : ACQUIRE:STATE
get_acquire_state : ACQUIRE:STATE?
set_average_waveforms : ACQuire:NUMAVg  # the number of waveforms that should make up an averaged waveform
get_number_waveforms : ACQuire:NUMACq?  # the number of waveforms that have occured since starting acquisition
set_horizontal_record_length : HORizontal:RECORDLength
get_horizontal_record_length : HORizontal:RECORDLength?
set_horizontal_scale : HORizontal:MAIn:SCAle
get_horizontal_scale : HORizontal:MAIn:SCAle?
get_horizontal_divisions: HORizontal:DIVisions?
set_horizontal_delay_time : HORizontal:DELay:TIMe
get_horizontal_delay_time : HORizontal:DELay:TIMe?
channel 1:
    set_coupling : CH1:COUPling
    get_coupling : CH1:COUPling?
    set_impedance : CH1:IMPedance
    get_impedance : CH1:IMPedance?
    set_trigger_source : TRIGger:A:EDGe:SOUrce CH1
    get_data : DATA:SOURCE CH1;:CURVe?  # read data from channel 1
    get_parameters : DATA:SOURCE CH1;:WFMPRe?
    set_vertical_scale : CH1:SCAle
    get_vertical_scale : CH1:SCAle?
    set_vertical_position : CH1:POSition
    get_vertical_position : CH1:POSition?
    set_vertical_offset : CH1:OFFSet
    get_vertical_offset : CH1:OFFSet?
    set_bandwidth : CH1:BANdwidth
    get_bandwidth : CH1:BANdwidth?
channel 2:
    set_coupling : CH2:COUPling
    get_coupling : CH2:COUPling?
    set_impedance : CH2:IMPedance
    get_impedance : CH2:IMPedance?
    set_trigger_source : TRIGger:A:EDGe:SOUrce CH2
    get_data : DATA:SOURCE CH2;:CURVe?  # read data from channel 2
    get_parameters : DATA:SOURCE CH2;:WFMPRe?
    set_vertical_scale : CH2:SCAle
    get_vertical_scale : CH2:SCAle?
    set_vertical_position : CH2:POSition
    get_vertical_position : CH2:POSition?
    set_vertical_offset : CH2:OFFSet
    get_vertical_offset : CH2:OFFSet?
    set_bandwidth : CH2:BANdwidth
    get_bandwidth : CH2:BANdwidth?
channel 3:
    set_coupling : CH3:COUPling
    get_coupling : CH3:COUPling?
    set_impedance : CH3:IMPedance
    get_impedance : CH3:IMPedance?
    set_trigger_source : TRIGger:A:EDGe:SOUrce CH3
    get_data : DATA:SOURCE CH3;:CURVe?  # read data from channel 3
    get_parameters : DATA:SOURCE CH3;:WFMPRe?
    set_vertical_scale : CH3:SCAle
    get_vertical_scale : CH3:SCAle?
    set_vertical_position : CH3:POSition
    get_vertical_position : CH3:POSition?
    set_vertical_offset : CH3:OFFSet
    get_vertical_offset : CH3:OFFSet?
    set_bandwidth : CH3:BANdwidth
    get_bandwidth : CH3:BANdwidth?
channel 4:
    set_coupling : CH4:COUPling
    get_coupling : CH4:COUPling?
    set_impedance : CH4:IMPedance
    get_impedance : CH4:IMPedance?
    set_trigger_source : TRIGger:A:EDGe:SOUrce CH4
    get_data : DATA:SOURCE CH4;:CURVe?  # read data from channel 4
    get_parameters : DATA:SOURCE CH4;:WFMPRe?
    set_vertical_scale : CH4:SCAle
    get_vertical_scale : CH4:SCAle?
    set_vertical_position : CH4:POSition
    get_vertical_position : CH4:POSition?
    set_vertical_offset : CH4:OFFSet
    get_vertical_offset : CH4:OFFSet?
    set_bandwidth : CH4:BANdwidth
    get_bandwidth : CH4:BANdwidth?
